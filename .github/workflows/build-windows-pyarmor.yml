name: Build GalaxyTimer (PyArmor obfuscate + PyInstaller)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows-repack:
    runs-on: windows-latest
    timeout-minutes: 90
    env:
      PYTHON_VERSION: '3.10'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Python entry script (auto)
        shell: bash
        run: |
          set -e
          if [ -d "pyscript" ]; then
            ENTRY_FILE=$(grep -R --line-number "__name__ *== *['\"]__main__['\"]" pyscript || true)
            if [ -n "$ENTRY_FILE" ]; then
              FILEPATH=$(echo "$ENTRY_FILE" | head -n1 | cut -d: -f1)
              echo "Detected entry: $FILEPATH"
              echo "ENTRY=$FILEPATH" >> $GITHUB_ENV
            else
              if [ -f "pyscript/galaxytimer.py" ]; then
                echo "No explicit __main__ found; defaulting to pyscript/galaxytimer.py"
                echo "ENTRY=pyscript/galaxytimer.py" >> $GITHUB_ENV
              else
                echo "ERROR: could not detect entry script. Please set ENTRY env or add a script with __main__ in pyscript/"
                exit 1
              fi
            fi
          else
            echo "No pyscript/ directory found; please set ENTRY manually as an env var or adjust workflow."
            exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade pip & install build tools
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install pyinstaller pyarmor pyttsx3

      - name: Install requirements if present
        shell: pwsh
        run: |
          if (Test-Path requirements.txt) {
            python -m pip install -r requirements.txt
          } else {
            Write-Host "no requirements.txt"
          }

      - name: Prepare build_src (copy sources + resources)
        shell: pwsh
        run: |
          Remove-Item -Force -ErrorAction SilentlyContinue .\GalaxyTimer.exe
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue .\build_src, .\obf, .\dist, .\build

          New-Item -ItemType Directory -Force -Path build_src | Out-Null
          Copy-Item -Recurse -Force -Path .\pyscript -Destination .\build_src\pyscript

          if (Test-Path .\resources) {
            Copy-Item -Recurse -Force -Path .\resources -Destination .\build_src\resources
          } elseif (Test-Path .\Resources) {
            Copy-Item -Recurse -Force -Path .\Resources -Destination .\build_src\Resources
          }

      - name: Inject build salt
        shell: pwsh
        run: |
          $bytes = New-Object byte[] 12
          $rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
          $rng.GetBytes($bytes)
          $salt = [System.Convert]::ToBase64String($bytes) -replace '/','_' -replace '\+','-' -replace '=',''
          if ($salt.Length -gt 16) { $salt = $salt.Substring(0,16) }
          Write-Host "Generated SALT: $salt"
          Add-Content -Path $env:GITHUB_ENV -Value "BUILD_SALT=$salt"

          $entryPath = Join-Path -Path (Get-Location) -ChildPath $env:ENTRY
          $copyEntry = $entryPath -replace [regex]::Escape("pyscript"), "build_src\pyscript"
          if (Test-Path $copyEntry) {
            (Get-Content $copyEntry -Raw) -replace "__BUILD_SALT__", $salt | Set-Content $copyEntry -Encoding UTF8
            Write-Host "Injected SALT into $copyEntry"
          } else {
            Write-Host "Warning: copied entry not found at $copyEntry. Skipping injection."
          }

      - name: Obfuscate with PyArmor (use gen command)
        shell: pwsh
        run: |
          $copiedEntry = (Join-Path (Get-Location) "build_src\pyscript\galaxytimer.py")
          if (-not (Test-Path $copiedEntry)) {
            Write-Error "Copied entry $copiedEntry not found. Aborting."
            exit 1
          }

          Write-Host "Starting PyArmor obfuscation on $copiedEntry"
          pyarmor gen --pack onefile $copiedEntry

      - name: Locate obfuscated entry file
        id: findobf
        shell: pwsh
        run: |
          $f = Get-ChildItem -Path .\obf -Filter 'galaxytimer.py' -Recurse -File | Select-Object -First 1
          if (-not $f) { Write-Error "Obfuscated entry file not found under ./obf"; exit 1 }
          Write-Host "Found obf entry: $($f.FullName)"
          Write-Output "::set-output name=obf_path::$($f.FullName)"

      - name: PyInstaller (pack obfuscated script -> onefile)
        shell: pwsh
        env:
          OBF_PATH: ${{ steps.findobf.outputs.obf_path }}
        run: |
          $entry = $env:OBF_PATH
          Write-Host "Using obfuscated entry: $entry"

          $iconPaths = @(".\build_src\resources\icon\icon.ico", ".\build_src\Resources\icon\icon.ico", ".\resources\icon\icon.ico", ".\Resources\icon\icon.ico")
          $icon = $null
          foreach ($p in $iconPaths) {
            if (Test-Path $p) { $icon = $p; break }
          }
          if ($icon) { Write-Host "Using icon: $icon" } else { Write-Host "Icon not found in expected paths; continuing without -i" }

          $args = @("--noconfirm","--clean","-F","--hidden-import=pyttsx3","--distpath",".\dist","--workpath",".\build")
          if ($icon) { $args += @("-i", $icon) }
          $args += $entry
          Write-Host "pyinstaller $($args -join ' ')"
          pyinstaller @args

      - name: Rename and publish exe (move dist\galaxytimer.exe -> GalaxyTimer.exe)
        shell: pwsh
        run: |
          $exePath = Join-Path -Path (Get-Location) -ChildPath "dist\galaxytimer.exe"
          if (Test-Path $exePath) {
            Move-Item -Force $exePath .\GalaxyTimer.exe
            Write-Host "Moved to GalaxyTimer.exe"
          }

      - name: Clean intermediate build artifacts (optional)
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue .\dist, .\build, .\obf, .\build_src
          Get-ChildItem -Path . -Filter "*.spec" -File | ForEach-Object { Remove-Item -Force $_.FullName }

      - name: Upload GalaxyTimer.exe artifact
        uses: actions/upload-artifact@v4
        with:
          name: GalaxyTimer-exe
          path: GalaxyTimer.exe
