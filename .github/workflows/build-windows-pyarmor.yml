name: Build GalaxyTimer (PyInstaller)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 90
    env:
      PYTHON_VERSION: '3.10'
      ENTRY: pyscript/galaxytimer.py  # 确保路径准确

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade pip & install build tools
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install pyinstaller pyttsx3 PySide6  # 安装必要模块

      - name: Install requirements if present
        shell: pwsh
        run: |
          if (Test-Path requirements.txt) {
            python -m pip install -r requirements.txt  # 安装其他依赖
          } else {
            Write-Host "No requirements.txt found."
          }

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          $iconPath = ".\resources\icon\icon.ico"  # 确认图标路径
          if (-not (Test-Path $iconPath)) {
            Write-Host "Icon not found, continuing without setting an icon."
            pyinstaller --noconfirm --onefile --hidden-import=pyttsx3 --hidden-import=PySide6 --add-data "build_src\pyscript\logic;logic" --add-data "build_src\pyscript\core;core" --add-data "build_src\pyscript\widgets;widgets" $env:ENTRY
          } else {
            pyinstaller --noconfirm --onefile --hidden-import=pyttsx3 --hidden-import=PySide6 --icon=$iconPath --add-data "build_src\pyscript\logic;logic" --add-data "build_src\pyscript\core;core" --add-data "build_src\pyscript\widgets;widgets" $env:ENTRY
          }

      - name: Rename and publish exe (move dist\galaxytimer.exe -> GalaxyTimer.exe)
        shell: pwsh
        run: |
          $exePath = Join-Path -Path (Get-Location) -ChildPath "dist\galaxytimer.exe"
          if (Test-Path $exePath) {
            Move-Item -Force $exePath .\GalaxyTimer.exe
            Write-Host "Moved to GalaxyTimer.exe"
          } else {
            Write-Error "GalaxyTimer.exe not found in the dist directory."
          }

      - name: Clean intermediate files (optional)
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue .\dist, .\build
          Get-ChildItem -Path . -Filter "*.spec" -File | ForEach-Object { Remove-Item -Force $_.FullName }

      - name: Upload GalaxyTimer.exe artifact
        uses: actions/upload-artifact@v4
        with:
          name: GalaxyTimer-exe
          path: GalaxyGTailmaexry-exe
