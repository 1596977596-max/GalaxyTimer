name: Build GalaxyTimer EXE (Windows) with PyArmor

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ENTRY: pyscript/main.py
  PYTHON_VERSION: '3.10'

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade pip & Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller pyarmor

      - name: Install app dependencies (if requirements.txt exists)
        shell: bash
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "no requirements.txt"
          fi

      - name: Restore PyArmor registration (optional)
        if: ${{ secrets.PYARMOR_REG_B64 }}
        shell: pwsh
        env:
          PYARMOR_REG_B64: ${{ secrets.PYARMOR_REG_B64 }}
        run: |
          Write-Host "Restoring PyArmor registration file from secret..."
          $bytes = [System.Convert]::FromBase64String($env:PYARMOR_REG_B64)
          [System.IO.File]::WriteAllBytes("pyarmor-reg.zip", $bytes)
          pyarmor reg pyarmor-reg.zip

      - name: Inject build salt
        shell: bash
        env:
          ENTRY: ${{ env.ENTRY }}
        run: |
          SALT=$(head -c 12 /dev/urandom | base64 | tr '/+=' '_-' | cut -c1-16)
          echo "SALT=$SALT" >> $GITHUB_ENV
          echo "Build salt is $SALT"
          if grep -q "__BUILD_SALT__" "$ENTRY" 2>/dev/null; then
            sed -i "s/__BUILD_SALT__/${SALT}/g" "$ENTRY"
            echo "Replaced __BUILD_SALT__ in $ENTRY"
          else
            echo "No __BUILD_SALT__ placeholder found in $ENTRY"
          fi

      - name: PyArmor gen --pack onefile (obfuscate + pack)
        shell: bash
        env:
          ENTRY: ${{ env.ENTRY }}
        run: |
          echo "Running: pyarmor gen --pack onefile \"$ENTRY\""
          pyarmor gen --pack onefile "$ENTRY"
          echo "dist listing:"
          ls -la dist || true

      - name: Upload EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: GalaxyTimer-exe
          path: dist/**/*.exe

      - name: (Optional) Create GitHub Release and attach EXE
        if: startsWith(github.ref, 'refs/heads/main')
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.run_number }}
          name: GalaxyTimer-build-${{ github.run_number }}
          artifacts: GalaxyTimer-exe
          draft: true
