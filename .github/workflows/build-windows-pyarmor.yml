name: Build GalaxyTimer (PyInstaller)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 90
    env:
      PYTHON_VERSION: '3.10'
      ENTRY: pyscript/galaxytimer.py  # 确保路径准确

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade pip & install build tools
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install pyinstaller pyttsx3 PySide6 keyboard

      - name: Prepare build_src (copy sources + resources)
        shell: pwsh
        run: |
          Remove-Item -Force -ErrorAction SilentlyContinue .\GalaxyTimer.exe
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue .\build_src, .\obf, .\dist, .\build

          New-Item -ItemType Directory -Force -Path build_src | Out-Null
          Copy-Item -Recurse -Force -Path .\pyscript -Destination .\build_src\pyscript

          # Verify and copy each necessary module
          $srcFolders = @("logic", "core", "widgets")
          foreach ($folder in $srcFolders) {
            if (Test-Path ".\pyscript\$folder") {
              Copy-Item -Recurse -Force -Path ".\pyscript\$folder" -Destination ".\build_src\pyscript\$folder"
            } else {
              Write-Host "Warning: Folder pyscript\$folder not found."
            }
          }

      - name: Check and convert file encoding (for debugging)
        shell: pwsh
        run: |
          $files = @("build_src\pyscript\galaxytimer.py", "build_src\pyscript\logic\*.py", "build_src\pyscript\widgets\*.py", "build_src\pyscript\core\*.py")
          foreach ($file in $files) {
            Get-ChildItem -Path $file | ForEach-Object {
              try {
                $content = Get-Content -Path $_.FullName -Raw -Encoding UTF8
                Write-Host "File $_.FullName is UTF-8 encoded and opened successfully."
              } catch {
                Write-Error "Unable to read $_.FullName. It may not be valid UTF-8 or does not exist."
                exit 1
              }
            }
          }

      - name: Inject build salt (optional)
        shell: pwsh
        run: |
          $bytes = New-Object byte[] 12
          $rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
          $rng.GetBytes($bytes)
          $salt = [System.Convert]::ToBase64String($bytes) -replace '/','_' -replace '\+','-' -replace '=',''
          if ($salt.Length -gt 16) { $salt = $salt.Substring(0,16) }
          Write-Host "Generated SALT: $salt"
          Add-Content -Path $env:GITHUB_ENV -Value "BUILD_SALT=$salt"

          $entryPath = Join-Path -Path (Get-Location) -ChildPath $env:ENTRY
          (Get-Content $entryPath -Raw) -replace "__BUILD_SALT__", $salt | Set-Content $entryPath -Encoding UTF8

      - name: Build with PyInstaller
        shell: pwsh
        run: |
          $iconPath = ".\resources\icon\icon.ico"  # 确认图标路径
          if (-not (Test-Path $iconPath)) {
            Write-Host "Icon not found, continuing without setting an icon."
            pyinstaller --noconfirm --onefile --hidden-import=pyttsx3 --hidden-import=PySide6 --hidden-import=keyboard --add-data "build_src\pyscript\logic;logic" --add-data "build_src\pyscript\core;core" --add-data "build_src\pyscript\widgets;widgets" $env:ENTRY
          } else {
            pyinstaller --noconfirm --onefile --hidden-import=pyttsx3 --hidden-import=PySide6 --hidden-import=keyboard --icon=$iconPath --add-data "build_src▋
